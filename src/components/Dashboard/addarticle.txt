import React, { useState } from "react";
import { Timestamp, collection, addDoc } from "firebase/firestore";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { storage, auth, db } from "../Firebase/firebaseConfig";
import { toast } from "react-toastify";
import { useAuthState } from "react-firebase-hooks/auth";
import { Link } from "react-router-dom";

export default function Addarticle() {
  const [user] = useAuthState(auth);
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    image: "",
    createdAt: Timestamp.now().toDate(),
  });

  const [progress, setProgress] = useState(0);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleImageChange = (e) => {
    setFormData({ ...formData, image: e.target.files[0] });
  };

  const handlePublish = () => {
    if (!formData.title || !formData.description || !formData.image) {
      alert("Please fill all the fields");
      return;
    }

    const storageRef = ref(
      storage,
      `/images/${Date.now()}${formData.image.name}`
    );

    const uploadImage = uploadBytesResumable(storageRef, formData.image);

    uploadImage.on(
      "state_changed",
      (snapshot) => {
        const progressPercent = Math.round(
          (snapshot.bytesTransferred / snapshot.totalBytes) * 100
        );
        setProgress(progressPercent);
      },
      (err) => {
        console.log(err);
      },
      () => {
        setFormData({
          title: "",
          description: "",
          image: "",
        });

        getDownloadURL(uploadImage.snapshot.ref).then((url) => {
          const articleRef = collection(db, "Articles");
          addDoc(articleRef, {
            title: formData.title,
            description: formData.description,
            imageUrl: url,
            createdAt: Timestamp.now().toDate(),
            createdBy: user.displayName,
            userId: user.uid,
            likes: [],
            comments: [],
          })
            .then(() => {
              toast("Article added successfully", { type: "success" });
              setProgress(0);
            })
            .catch((err) => {
              toast("Error adding article", { type: "error" });
            });
        });
      }
    );
  };

  return (
    <div
      style={{
        border: "1px solid red",
        display: "flex",
        justifyContent: "center",
        marginTop: "70px",
        height: "",
      }}
    >
      <div
        style={{
          // display: "flex",
          // margin: "10px 10px 10px 10px",
          borderRadius: "10px",
          // padding: "10px",
          // width: "900px",
          // height: "100px",
          // backgroundColor: "#FFFFFF",
          boxShadow:
            "rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px",
        }}
      >
        <h2
          style={{
            // width: "100px",
            // height: "30px",
            outline: "1px solid green",
            // marginTop: "-5px",
            // fontSize: "20px",
          }}
        >
          Create Post:
        </h2>
        <div style={{ marginTop: "65px", display: "flex" }}>
          <div
          // style={{
          //   margin: "2px",
          //   textAlign: "center",
          //   display: "flex",
          //   outline: "1px solid red",
          //   height: "40px",
          //   width: "300px",
          // }}
          >
            <label htmlFor="">Title:</label>
            <input
              type="text"
              name="title"
              value={formData.title}
              onChange={(e) => handleChange(e)}
              // style={{
              //   border: "none",
              //   outline: "none",
              //   borderRadius: "15px",
              //   boxShadow: "rgba(0, 0, 0, 0.16) 0px 1px 4px",
              //   height: "30px",
              // }}
            />
          </div>
          {/* description */}
          <div
          // style={{
          //   border: "1px solid red",
          //   display: "flex",
          //   justifyContent: "center",
          //   outline: "1px solid red",
          //   height: "40px",
          //   width: "300px",
          // }}
          >
            <label htmlFor="">Description</label>
            <textarea
              name="description"
              value={formData.description}
              onChange={(e) => handleChange(e)}
              // style={{
              //   border: "none",
              //   outline: "none",
              //   borderRadius: "15px",
              //   boxShadow: "rgba(0, 0, 0, 0.16) 0px 1px 4px",
              //   height: "30px",
              // }}
            />
          </div>
          {/* image */}
          <label htmlFor="">Image</label>
          <input
            type="file"
            name="image"
            accept="image/*"
            className="form-control"
            onChange={(e) => handleImageChange(e)}
          />
          {progress === 0 ? null : (
            <div className="progress">
              <div
                // className="progress-bar progress-bar-striped mt-2"
                style={{ width: `${progress}%` }}
              >
                {`uploading image ${progress}%`}
              </div>
            </div>
          )}
          <button onClick={handlePublish} style={{ height: "fit-content" }}>
            Publish
          </button>
          )
        </div>
      </div>
    </div>
  );
}
